syntax = "proto2";

message TimestampMessage {
    required uint64 id = 1;
    required uint64 timestamp = 2;
}

message ReadMessage {
    required bytes key = 1;
    optional TimestampMessage readtime = 2;
}

message WriteMessage {
    required bytes key = 1;   //Key-value store key -- Can be decoded into table key.
    //required bytes value = 2;
    oneof write_value {  //TODO: In prepare and commit: must add has_value() checks.
        bytes value = 2;
        //TableWrite table_writes = 3;
        RowUpdates rowupdates = 3;  //Table name and primary key cols are included in key encoding.
    }
}

message PingMessage {
  required uint64 salt = 1;
}

// A serialized transaction
message TransactionMessage {
    repeated ReadMessage readset = 1;
    repeated WriteMessage writeset = 2;
}



//Table Writes.  -- Alternatively -- add optional RowUpdates field
message RowUpdates {
    map<string, bytes> attribute_writes = 1; //map from attribute name to new value (in bytes for general encoding) //TODO: Maybe re-factor this to hold column id instead of name -- or to be in order
    optional TimestampMessage readtime = 2; //version of the row that was read (optional: for ReadModWrites) in order to fetch remaining row values (in case an update only updates some columns)
    optional bool deletion = 3;

    repeated string column_values = 4;
   
}
message TableWrite {
    map<string, RowUpdates> row_updates = 1; //map from row-name to all attribute writes

    repeated string column_names = 2;  //store column names in order
    repeated RowUpdates rows = 3;            // each RowUpdate stores the column values in order.
}
message TableWrites {
    map<string, TableWrite> tablewrites= 1; //map from table name to all writes for this table.
}
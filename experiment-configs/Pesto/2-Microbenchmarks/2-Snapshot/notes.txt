Inconsistency setup:
- for each Tx, drop writes at 1/3rd of replicas. I.e. drop prepare and commit application.
- still allow Tx to commit fast path though... So a bit artificial
- Don't want client failures because that will require fallback + tput/client. 
- Want to isolate inconsistency effect on snapshot.
- Don't want 1/2 dropped writes, else snapshot not guaranteed to have the newest tx.
- Dropping at only 2 out of 6 replicas also guarantees that at least 4 have prepared and will uphold safety!!

Note: We are not failing every eager, just simulating inconsistency. As a result however, eager will fail whenever touching something inconsistent.


For uniform:
- Inconsistent writes are not immediately relevant. But eventually they have to be cleaned up.
- After sufficient warmup, 1/3rd of tx should have to go snapshot. (check stats!)
	- 2/3rd of transactions succeed eager because they pick at most 1 of the dropping replicas as part of their quorum
- Surprisingly, performance *increases* wrt to the drop case:
	- this is because the cleanup is only so delayed, that sync only happens on committed Tx.
	- because we drop prepared too however, we are saving work overall: only have to do commit.
	- committed writes become JIT.
	
- Making prepares visible is not necessary for uniform. => Show performance with it turned off.

For zipf:
- might need higher mono
- might need higher k?

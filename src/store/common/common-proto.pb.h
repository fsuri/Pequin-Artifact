// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common-proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2dproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2dproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2dproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2dproto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2dproto_2eproto;
class PingMessage;
struct PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
class ReadMessage;
struct ReadMessageDefaultTypeInternal;
extern ReadMessageDefaultTypeInternal _ReadMessage_default_instance_;
class TimestampMessage;
struct TimestampMessageDefaultTypeInternal;
extern TimestampMessageDefaultTypeInternal _TimestampMessage_default_instance_;
class TransactionMessage;
struct TransactionMessageDefaultTypeInternal;
extern TransactionMessageDefaultTypeInternal _TransactionMessage_default_instance_;
class WriteMessage;
struct WriteMessageDefaultTypeInternal;
extern WriteMessageDefaultTypeInternal _WriteMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PingMessage* Arena::CreateMaybeMessage<::PingMessage>(Arena*);
template<> ::ReadMessage* Arena::CreateMaybeMessage<::ReadMessage>(Arena*);
template<> ::TimestampMessage* Arena::CreateMaybeMessage<::TimestampMessage>(Arena*);
template<> ::TransactionMessage* Arena::CreateMaybeMessage<::TransactionMessage>(Arena*);
template<> ::WriteMessage* Arena::CreateMaybeMessage<::WriteMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TimestampMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TimestampMessage) */ {
 public:
  inline TimestampMessage() : TimestampMessage(nullptr) {}
  ~TimestampMessage() override;
  explicit PROTOBUF_CONSTEXPR TimestampMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimestampMessage(const TimestampMessage& from);
  TimestampMessage(TimestampMessage&& from) noexcept
    : TimestampMessage() {
    *this = ::std::move(from);
  }

  inline TimestampMessage& operator=(const TimestampMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampMessage& operator=(TimestampMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimestampMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimestampMessage* internal_default_instance() {
    return reinterpret_cast<const TimestampMessage*>(
               &_TimestampMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimestampMessage& a, TimestampMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimestampMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimestampMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimestampMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimestampMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimestampMessage& from) {
    TimestampMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TimestampMessage";
  }
  protected:
  explicit TimestampMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // required uint64 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TimestampMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t id_;
    uint64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2dproto_2eproto;
};
// -------------------------------------------------------------------

class ReadMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadMessage) */ {
 public:
  inline ReadMessage() : ReadMessage(nullptr) {}
  ~ReadMessage() override;
  explicit PROTOBUF_CONSTEXPR ReadMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadMessage(const ReadMessage& from);
  ReadMessage(ReadMessage&& from) noexcept
    : ReadMessage() {
    *this = ::std::move(from);
  }

  inline ReadMessage& operator=(const ReadMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadMessage& operator=(ReadMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadMessage* internal_default_instance() {
    return reinterpret_cast<const ReadMessage*>(
               &_ReadMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadMessage& a, ReadMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadMessage& from) {
    ReadMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadMessage";
  }
  protected:
  explicit ReadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kReadtimeFieldNumber = 2,
  };
  // required bytes key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional .TimestampMessage readtime = 2;
  bool has_readtime() const;
  private:
  bool _internal_has_readtime() const;
  public:
  void clear_readtime();
  const ::TimestampMessage& readtime() const;
  PROTOBUF_NODISCARD ::TimestampMessage* release_readtime();
  ::TimestampMessage* mutable_readtime();
  void set_allocated_readtime(::TimestampMessage* readtime);
  private:
  const ::TimestampMessage& _internal_readtime() const;
  ::TimestampMessage* _internal_mutable_readtime();
  public:
  void unsafe_arena_set_allocated_readtime(
      ::TimestampMessage* readtime);
  ::TimestampMessage* unsafe_arena_release_readtime();

  // @@protoc_insertion_point(class_scope:ReadMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::TimestampMessage* readtime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2dproto_2eproto;
};
// -------------------------------------------------------------------

class WriteMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WriteMessage) */ {
 public:
  inline WriteMessage() : WriteMessage(nullptr) {}
  ~WriteMessage() override;
  explicit PROTOBUF_CONSTEXPR WriteMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteMessage(const WriteMessage& from);
  WriteMessage(WriteMessage&& from) noexcept
    : WriteMessage() {
    *this = ::std::move(from);
  }

  inline WriteMessage& operator=(const WriteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteMessage& operator=(WriteMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteMessage* internal_default_instance() {
    return reinterpret_cast<const WriteMessage*>(
               &_WriteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WriteMessage& a, WriteMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteMessage& from) {
    WriteMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteMessage";
  }
  protected:
  explicit WriteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required bytes key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:WriteMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2dproto_2eproto;
};
// -------------------------------------------------------------------

class PingMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PingMessage) */ {
 public:
  inline PingMessage() : PingMessage(nullptr) {}
  ~PingMessage() override;
  explicit PROTOBUF_CONSTEXPR PingMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingMessage(const PingMessage& from);
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PingMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PingMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PingMessage& from) {
    PingMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PingMessage";
  }
  protected:
  explicit PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaltFieldNumber = 1,
  };
  // required uint64 salt = 1;
  bool has_salt() const;
  private:
  bool _internal_has_salt() const;
  public:
  void clear_salt();
  uint64_t salt() const;
  void set_salt(uint64_t value);
  private:
  uint64_t _internal_salt() const;
  void _internal_set_salt(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t salt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2dproto_2eproto;
};
// -------------------------------------------------------------------

class TransactionMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransactionMessage) */ {
 public:
  inline TransactionMessage() : TransactionMessage(nullptr) {}
  ~TransactionMessage() override;
  explicit PROTOBUF_CONSTEXPR TransactionMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionMessage(const TransactionMessage& from);
  TransactionMessage(TransactionMessage&& from) noexcept
    : TransactionMessage() {
    *this = ::std::move(from);
  }

  inline TransactionMessage& operator=(const TransactionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionMessage& operator=(TransactionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionMessage* internal_default_instance() {
    return reinterpret_cast<const TransactionMessage*>(
               &_TransactionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionMessage& a, TransactionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionMessage& from) {
    TransactionMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransactionMessage";
  }
  protected:
  explicit TransactionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadsetFieldNumber = 1,
    kWritesetFieldNumber = 2,
  };
  // repeated .ReadMessage readset = 1;
  int readset_size() const;
  private:
  int _internal_readset_size() const;
  public:
  void clear_readset();
  ::ReadMessage* mutable_readset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadMessage >*
      mutable_readset();
  private:
  const ::ReadMessage& _internal_readset(int index) const;
  ::ReadMessage* _internal_add_readset();
  public:
  const ::ReadMessage& readset(int index) const;
  ::ReadMessage* add_readset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadMessage >&
      readset() const;

  // repeated .WriteMessage writeset = 2;
  int writeset_size() const;
  private:
  int _internal_writeset_size() const;
  public:
  void clear_writeset();
  ::WriteMessage* mutable_writeset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteMessage >*
      mutable_writeset();
  private:
  const ::WriteMessage& _internal_writeset(int index) const;
  ::WriteMessage* _internal_add_writeset();
  public:
  const ::WriteMessage& writeset(int index) const;
  ::WriteMessage* add_writeset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteMessage >&
      writeset() const;

  // @@protoc_insertion_point(class_scope:TransactionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadMessage > readset_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteMessage > writeset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2dproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimestampMessage

// required uint64 id = 1;
inline bool TimestampMessage::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimestampMessage::has_id() const {
  return _internal_has_id();
}
inline void TimestampMessage::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t TimestampMessage::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t TimestampMessage::id() const {
  // @@protoc_insertion_point(field_get:TimestampMessage.id)
  return _internal_id();
}
inline void TimestampMessage::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void TimestampMessage::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TimestampMessage.id)
}

// required uint64 timestamp = 2;
inline bool TimestampMessage::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimestampMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void TimestampMessage::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t TimestampMessage::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t TimestampMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:TimestampMessage.timestamp)
  return _internal_timestamp();
}
inline void TimestampMessage::_internal_set_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void TimestampMessage::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TimestampMessage.timestamp)
}

// -------------------------------------------------------------------

// ReadMessage

// required bytes key = 1;
inline bool ReadMessage::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadMessage::has_key() const {
  return _internal_has_key();
}
inline void ReadMessage::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadMessage::key() const {
  // @@protoc_insertion_point(field_get:ReadMessage.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadMessage::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ReadMessage.key)
}
inline std::string* ReadMessage::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:ReadMessage.key)
  return _s;
}
inline const std::string& ReadMessage::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ReadMessage::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadMessage::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadMessage::release_key() {
  // @@protoc_insertion_point(field_release:ReadMessage.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReadMessage::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ReadMessage.key)
}

// optional .TimestampMessage readtime = 2;
inline bool ReadMessage::_internal_has_readtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.readtime_ != nullptr);
  return value;
}
inline bool ReadMessage::has_readtime() const {
  return _internal_has_readtime();
}
inline void ReadMessage::clear_readtime() {
  if (_impl_.readtime_ != nullptr) _impl_.readtime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TimestampMessage& ReadMessage::_internal_readtime() const {
  const ::TimestampMessage* p = _impl_.readtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::TimestampMessage&>(
      ::_TimestampMessage_default_instance_);
}
inline const ::TimestampMessage& ReadMessage::readtime() const {
  // @@protoc_insertion_point(field_get:ReadMessage.readtime)
  return _internal_readtime();
}
inline void ReadMessage::unsafe_arena_set_allocated_readtime(
    ::TimestampMessage* readtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readtime_);
  }
  _impl_.readtime_ = readtime;
  if (readtime) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReadMessage.readtime)
}
inline ::TimestampMessage* ReadMessage::release_readtime() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TimestampMessage* temp = _impl_.readtime_;
  _impl_.readtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TimestampMessage* ReadMessage::unsafe_arena_release_readtime() {
  // @@protoc_insertion_point(field_release:ReadMessage.readtime)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TimestampMessage* temp = _impl_.readtime_;
  _impl_.readtime_ = nullptr;
  return temp;
}
inline ::TimestampMessage* ReadMessage::_internal_mutable_readtime() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.readtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::TimestampMessage>(GetArenaForAllocation());
    _impl_.readtime_ = p;
  }
  return _impl_.readtime_;
}
inline ::TimestampMessage* ReadMessage::mutable_readtime() {
  ::TimestampMessage* _msg = _internal_mutable_readtime();
  // @@protoc_insertion_point(field_mutable:ReadMessage.readtime)
  return _msg;
}
inline void ReadMessage::set_allocated_readtime(::TimestampMessage* readtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.readtime_;
  }
  if (readtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(readtime);
    if (message_arena != submessage_arena) {
      readtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readtime, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.readtime_ = readtime;
  // @@protoc_insertion_point(field_set_allocated:ReadMessage.readtime)
}

// -------------------------------------------------------------------

// WriteMessage

// required bytes key = 1;
inline bool WriteMessage::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteMessage::has_key() const {
  return _internal_has_key();
}
inline void WriteMessage::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WriteMessage::key() const {
  // @@protoc_insertion_point(field_get:WriteMessage.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteMessage::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WriteMessage.key)
}
inline std::string* WriteMessage::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:WriteMessage.key)
  return _s;
}
inline const std::string& WriteMessage::_internal_key() const {
  return _impl_.key_.Get();
}
inline void WriteMessage::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteMessage::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteMessage::release_key() {
  // @@protoc_insertion_point(field_release:WriteMessage.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WriteMessage::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WriteMessage.key)
}

// required bytes value = 2;
inline bool WriteMessage::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WriteMessage::has_value() const {
  return _internal_has_value();
}
inline void WriteMessage::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WriteMessage::value() const {
  // @@protoc_insertion_point(field_get:WriteMessage.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteMessage::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WriteMessage.value)
}
inline std::string* WriteMessage::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:WriteMessage.value)
  return _s;
}
inline const std::string& WriteMessage::_internal_value() const {
  return _impl_.value_.Get();
}
inline void WriteMessage::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteMessage::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteMessage::release_value() {
  // @@protoc_insertion_point(field_release:WriteMessage.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WriteMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WriteMessage.value)
}

// -------------------------------------------------------------------

// PingMessage

// required uint64 salt = 1;
inline bool PingMessage::_internal_has_salt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PingMessage::has_salt() const {
  return _internal_has_salt();
}
inline void PingMessage::clear_salt() {
  _impl_.salt_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PingMessage::_internal_salt() const {
  return _impl_.salt_;
}
inline uint64_t PingMessage::salt() const {
  // @@protoc_insertion_point(field_get:PingMessage.salt)
  return _internal_salt();
}
inline void PingMessage::_internal_set_salt(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.salt_ = value;
}
inline void PingMessage::set_salt(uint64_t value) {
  _internal_set_salt(value);
  // @@protoc_insertion_point(field_set:PingMessage.salt)
}

// -------------------------------------------------------------------

// TransactionMessage

// repeated .ReadMessage readset = 1;
inline int TransactionMessage::_internal_readset_size() const {
  return _impl_.readset_.size();
}
inline int TransactionMessage::readset_size() const {
  return _internal_readset_size();
}
inline void TransactionMessage::clear_readset() {
  _impl_.readset_.Clear();
}
inline ::ReadMessage* TransactionMessage::mutable_readset(int index) {
  // @@protoc_insertion_point(field_mutable:TransactionMessage.readset)
  return _impl_.readset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadMessage >*
TransactionMessage::mutable_readset() {
  // @@protoc_insertion_point(field_mutable_list:TransactionMessage.readset)
  return &_impl_.readset_;
}
inline const ::ReadMessage& TransactionMessage::_internal_readset(int index) const {
  return _impl_.readset_.Get(index);
}
inline const ::ReadMessage& TransactionMessage::readset(int index) const {
  // @@protoc_insertion_point(field_get:TransactionMessage.readset)
  return _internal_readset(index);
}
inline ::ReadMessage* TransactionMessage::_internal_add_readset() {
  return _impl_.readset_.Add();
}
inline ::ReadMessage* TransactionMessage::add_readset() {
  ::ReadMessage* _add = _internal_add_readset();
  // @@protoc_insertion_point(field_add:TransactionMessage.readset)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ReadMessage >&
TransactionMessage::readset() const {
  // @@protoc_insertion_point(field_list:TransactionMessage.readset)
  return _impl_.readset_;
}

// repeated .WriteMessage writeset = 2;
inline int TransactionMessage::_internal_writeset_size() const {
  return _impl_.writeset_.size();
}
inline int TransactionMessage::writeset_size() const {
  return _internal_writeset_size();
}
inline void TransactionMessage::clear_writeset() {
  _impl_.writeset_.Clear();
}
inline ::WriteMessage* TransactionMessage::mutable_writeset(int index) {
  // @@protoc_insertion_point(field_mutable:TransactionMessage.writeset)
  return _impl_.writeset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteMessage >*
TransactionMessage::mutable_writeset() {
  // @@protoc_insertion_point(field_mutable_list:TransactionMessage.writeset)
  return &_impl_.writeset_;
}
inline const ::WriteMessage& TransactionMessage::_internal_writeset(int index) const {
  return _impl_.writeset_.Get(index);
}
inline const ::WriteMessage& TransactionMessage::writeset(int index) const {
  // @@protoc_insertion_point(field_get:TransactionMessage.writeset)
  return _internal_writeset(index);
}
inline ::WriteMessage* TransactionMessage::_internal_add_writeset() {
  return _impl_.writeset_.Add();
}
inline ::WriteMessage* TransactionMessage::add_writeset() {
  ::WriteMessage* _add = _internal_add_writeset();
  // @@protoc_insertion_point(field_add:TransactionMessage.writeset)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WriteMessage >&
TransactionMessage::writeset() const {
  // @@protoc_insertion_point(field_list:TransactionMessage.writeset)
  return _impl_.writeset_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2dproto_2eproto
